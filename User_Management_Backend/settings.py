"""
Django settings for User_Management_Backend project.

Generated by 'django-admin startproject' using Django 3.2.13.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""
import os
from pathlib import Path
from dotenv import load_dotenv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

load_dotenv(os.path.join(os.path.dirname(os.path.dirname(__file__)), ".env"))
# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-hbkg8p4pu_9ae3$+4k=^l7^!y&j18%-ypsh!=20p(kf^o%3(ln'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["*"]
CORS_ORIGIN_ALLOW_ALL = True
CORS_ALLOW_HEADERS = [
    "*",
]

CORS_ALLOW_METHODS = [
    "DELETE",
    "GET",
    "OPTIONS",
    "PATCH",
    "POST",
    "PUT",
]

# JWT Configurations
if not os.environ.get("JWT_ENCODING_ALGO"):
    print("Please specify JWT_ENCODING_ALGO' variable in .env file")
JWT_ENCODING_ALGO = os.environ.get("JWT_ENCODING_ALGO")

if not os.environ.get("JWT_ENCODING_SECRET_KEY"):
    print("Please specify 'JWT_ENCODING_SECRET_KEY' variable in .env file")
JWT_ENCODING_SECRET_KEY = os.environ.get("JWT_ENCODING_SECRET_KEY")

if not os.environ.get("JWT_TOKEN_EXPIRY_DELTA"):
    print("Please specify 'JWT_TOKEN_EXPIRY_DELTA' variable in .env file")
JWT_TOKEN_EXPIRY_DELTA = os.environ.get("JWT_TOKEN_EXPIRY_DELTA")

# Application definition

DJANGO_APPS = [
    'django.contrib.admin',
    "django.contrib.auth",
    "django.contrib.contenttypes",
    'django.contrib.sessions',
    'django.contrib.messages',
    "django.contrib.staticfiles",
]

DJANGO_SECONDARY_APPS = [
    "rest_framework",
    "corsheaders",
]

PROJECT_APPS = [
    "apps.users",
]

INSTALLED_APPS = DJANGO_APPS + DJANGO_SECONDARY_APPS + PROJECT_APPS

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'User_Management_Backend.urls'
AUTH_USER_MODEL = "users.User"

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'User_Management_Backend.wsgi.application'

# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# DATABASES = {
#     "default": {
#         "ENGINE": "django.db.backends.postgresql_psycopg2",
#         "NAME": os.getenv("DATABASE_NAME", ""),
#         "USER": os.getenv("DATABASE_USERNAME", ""),
#         "PASSWORD": os.getenv("DATABASE_PASSWORD", ""),
#         "HOST": os.getenv("DATABASE_HOST    ", ""),
#         "PORT": os.getenv("DATABASE_PORT", "")
#     },
# }

EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_HOST = os.getenv("EMAIL_HOST", "smtp.office365.com")
EMAIL_USE_TLS = os.getenv("EMAIL_USE_TLS", True)
EMAIL_PORT = os.getenv("EMAIL_PORT", 587)
EMAIL_HOST_USER = os.getenv("EMAIL_HOST_USER", "sales.notifications@lucky-cement.com")
EMAIL_HOST_PASSWORD = os.getenv("EMAIL_HOST_USER", "AnotherHarderPassword@786")

AUTHENTICATION_BACKENDS = ["apps.auth.views.AuthenticationBackend"]

# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

if DEBUG:
    min_level = "DEBUG"
else:
    min_level = "INFO"

APP_NAME = "web_app_backend"
LOGGER_NAME_PREFIX = APP_NAME + "."
LOGGING = {
    "version": 1,
    "disable_existing_loggers": True,
    "formatters": {
        "verbose": {
            "format": "[%(asctime)s] %(levelname)s  (%(name)s.%(funcName)s:%(lineno)d) - %(message)s"
        },
        "simple": {"format": "[%(asctime)s] %(levelname)s - %(message)s"},
    },
    "handlers": {
        "console": {
            "level": min_level,
            "class": "logging.StreamHandler",
            "formatter": "verbose",
        },
    },
    "loggers": {
        APP_NAME: {
            "handlers": ["console"],
            "level": min_level,
            "propagate": False,
        },
        "gunicorn": {
            "handlers": ["console"],
            "level": min_level,
            "propagate": False,
        },
    },
}
